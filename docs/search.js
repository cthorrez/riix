window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "riix", "modulename": "riix", "kind": "module", "doc": "<p>Open source implementations of online rating systems focusing on efficiency for offline experimentation</p>\n\n<h2 id=\"when-to-use-riix\">When to use riix</h2>\n\n<p>This package is designed to accelerate experiments studying and comparing rating systems. In the scenario where you have paired comparison datasets with a known number of competitors and time range, riix exploits that information to achieve fast runtimes. It's <strong>not</strong> useful in the streaming case where new data with new competitors are coming in. It also only currently supports 1v1 competitions but future support for two team competitions is planned. (more than 2 teams is not)</p>\n\n<blockquote>\n  <p>I have a large dataset of player matches for a game and want to determine which rating system out of Elo, Glicko, TrueSkill etc. gives the best predictive accuracy.</p>\n</blockquote>\n\n<p>Use riix! \ud83d\udc4d</p>\n\n<blockquote>\n  <p>I want to incorporate skill based matchmaking into the game I am creating and want a package to compute ratings for players on the fly.</p>\n</blockquote>\n\n<p>There are lots of other great python packages for that too! (just not riix)</p>\n\n<ul>\n<li><a href=\"https://github.com/OpenDebates/openskill.py\">openskill.py</a> Multi-way competitions with <a href=\"https://www.jmlr.org/papers/v12/weng11a.html\">Weng-Lin</a> rating systems</li>\n<li><a href=\"https://github.com/topics/trueskill\">trueskill</a> Open source implementation of Microsoft's rating system</li>\n<li><a href=\"https://github.com/agoragames/PythonSkills\">PythonSkills</a> A port of <a href=\"https://www.moserware.com/2010/03/computing-your-skill.html\">Moserware's</a> Glicko and TrueSkill <a href=\"https://github.com/moserware/Skills\">C# code</a> to python</li>\n<li><a href=\"https://github.com/mbhynes/skelo/tree/main\">skelo</a> Elo and Glicko 2 with the <a href=\"https://scikit-learn.org/stable/\">scikit-learn</a> interface</li>\n<li><a href=\"https://github.com/kari/mmr-python\">mmr-python</a> Glicko and Weng-Lin rating systems</li>\n<li>glicko2\n<ul>\n<li><a href=\"https://github.com/sublee/glicko2\">sublee/glicko2</a></li>\n<li><a href=\"https://github.com/deepy/glicko2\">deepy/glicko2</a></li>\n</ul></li>\n<li><a href=\"https://github.com/pfmonville/whole_history_rating\">whole_history_rating</a> Python port of <a href=\"https://www.remi-coulom.fr/WHR/\">WHR</a></li>\n</ul>\n\n<h2 id=\"example\">Example</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">riix.models.elo</span> <span class=\"kn\">import</span> <span class=\"n\">Elo</span>\n<span class=\"kn\">from</span> <span class=\"nn\">riix.utils</span> <span class=\"kn\">import</span> <span class=\"n\">TimedPairDataset</span><span class=\"p\">,</span> <span class=\"n\">split_pair_dataset</span><span class=\"p\">,</span> <span class=\"n\">generate_matchup_data</span>\n<span class=\"kn\">from</span> <span class=\"nn\">riix.metrics</span> <span class=\"kn\">import</span> <span class=\"n\">binary_metrics_suite</span>\n\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">generate_matchup_data</span><span class=\"p\">()</span> <span class=\"c1\"># replace with your **polars** dataframe</span>\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">TimedPairDataset</span><span class=\"p\">(</span>\n    <span class=\"n\">df</span><span class=\"p\">,</span>\n    <span class=\"n\">competitor_cols</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;competitor_1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;competitor_2&#39;</span><span class=\"p\">],</span>\n    <span class=\"n\">outcome_col</span><span class=\"o\">=</span><span class=\"s1\">&#39;outcome&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">datetime_col</span><span class=\"o\">=</span><span class=\"s1\">&#39;date&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">rating_period</span><span class=\"o\">=</span><span class=\"s1\">&#39;1D&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">train_dataset</span><span class=\"p\">,</span> <span class=\"n\">test_dataset</span> <span class=\"o\">=</span> <span class=\"n\">split_pair_dataset</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">test_fraction</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">&#39;</span><span class=\"si\">{</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">train_dataset</span><span class=\"p\">)</span><span class=\"si\">=}</span><span class=\"s1\">, </span><span class=\"si\">{</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">test_dataset</span><span class=\"p\">)</span><span class=\"si\">=}</span><span class=\"s1\">&#39;</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">loaded</span> <span class=\"n\">dataset</span> <span class=\"k\">with</span><span class=\"p\">:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">10000</span> <span class=\"n\">matchups</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">100</span> <span class=\"n\">unique</span> <span class=\"n\">competitors</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"mi\">10</span> <span class=\"n\">rating</span> <span class=\"n\">periods</span> <span class=\"n\">of</span> <span class=\"n\">length</span> <span class=\"mi\">1</span><span class=\"n\">D</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">train_dataset</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"mi\">8000</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">test_dataset</span><span class=\"p\">)</span><span class=\"o\">=</span><span class=\"mi\">2000</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Elo</span><span class=\"p\">(</span><span class=\"n\">competitors</span><span class=\"o\">=</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">competitors</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit_dataset</span><span class=\"p\">(</span><span class=\"n\">train_dataset</span><span class=\"p\">)</span>\n<span class=\"n\">test_probs</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit_dataset</span><span class=\"p\">(</span><span class=\"n\">test_dataset</span><span class=\"p\">,</span> <span class=\"n\">return_pre_match_probs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">test_metrics</span> <span class=\"o\">=</span> <span class=\"n\">binary_metrics_suite</span><span class=\"p\">(</span><span class=\"n\">probs</span><span class=\"o\">=</span><span class=\"n\">test_probs</span><span class=\"p\">,</span> <span class=\"n\">outcomes</span><span class=\"o\">=</span><span class=\"n\">test_dataset</span><span class=\"o\">.</span><span class=\"n\">outcomes</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">test_metrics</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"p\">{</span><span class=\"s1\">&#39;accuracy&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.72975</span><span class=\"p\">,</span> <span class=\"s1\">&#39;log_loss&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.5359083106524117</span><span class=\"p\">,</span> <span class=\"s1\">&#39;brier_score&#39;</span><span class=\"p\">:</span> <span class=\"mf\">0.1793377446861956</span><span class=\"p\">}</span>\n\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">print_leaderboard</span><span class=\"p\">(</span><span class=\"n\">num_places</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">competitor</span>      <span class=\"n\">rating</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">competitor_69</span>   <span class=\"mf\">1874.170019</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">competitor_75</span>   <span class=\"mf\">1827.933570</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">competitor_12</span>   <span class=\"mf\">1826.119826</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">competitor_81</span>   <span class=\"mf\">1825.071605</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">competitor_30</span>   <span class=\"mf\">1802.338983</span>\n</code></pre>\n</div>\n\n<h2 id=\"license\">License</h2>\n\n<p>This package is licensed under a\n<a href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.\nI've chosen a non-commercial license as overbroad protection to prevent the use of this package in the gambling and odds setting industries. If you would like to use riix for your business in any other area please do not hesitate to reach out and I'll happily grant you an eternal lifetime license. :)</p>\n\n<h2 id=\"about-the-name\">About the name</h2>\n\n<p>The name riix represents an attempt to cleverly represent the idea of \"R8\" (pronounced \"rate\") alphabetically using the Roman numeral IIX in place of 8. By the time I realized the correct numeral would have been VIII I was already attatched to the name riix so I stuck with it. However on further research it turns out the Romans themselves occasionally used this form as well! <a href=\"https://scholarworks.utep.edu/cs_techrep/1555/\">Why Romans Sometimes Wrote 8 as VIII, And Sometimes as IIX: A Possible Explanation</a></p>\n"}, {"fullname": "riix.core", "modulename": "riix.core", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "riix.core.base", "modulename": "riix.core.base", "kind": "module", "doc": "<p>base class for online rating systems</p>\n"}, {"fullname": "riix.core.base.OnlineRatingSystem", "modulename": "riix.core.base", "qualname": "OnlineRatingSystem", "kind": "class", "doc": "<p>Base class for online rating systems. This class provides a framework for implementing\nvarious online rating systems, such as Elo, Glicko, or TrueSkill. It defines the basic\nstructure and common methods that all such systems might share.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>rating_dim (int):</strong>  Dimension of competitor ratings. This could be 1 for systems like Elo,\nwhere each competitor has a single rating value, or more for systems\nlike TrueSkill that use multiple values (e.g., mean and standard deviation).</li>\n<li><strong>competitors (list):</strong>  A list of competitors within the rating system.</li>\n<li><strong>num_competitors (int):</strong>  The number of competitors in the system.</li>\n</ul>\n", "bases": "abc.ABC"}, {"fullname": "riix.core.base.OnlineRatingSystem.__init__", "modulename": "riix.core.base", "qualname": "OnlineRatingSystem.__init__", "kind": "function", "doc": "<p>Initializes a new instance of an online rating system with a list of competitors.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>competitors (list):</strong>  A list of competitors to be included in the rating system. Each\ncompetitor should have a structure or identifier compatible with\nthe specific rating system's requirements.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">competitors</span></span>)</span>"}, {"fullname": "riix.core.base.OnlineRatingSystem.rating_dim", "modulename": "riix.core.base", "qualname": "OnlineRatingSystem.rating_dim", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "riix.core.base.OnlineRatingSystem.competitors", "modulename": "riix.core.base", "qualname": "OnlineRatingSystem.competitors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.core.base.OnlineRatingSystem.num_competitors", "modulename": "riix.core.base", "qualname": "OnlineRatingSystem.num_competitors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.core.base.OnlineRatingSystem.print_leaderboard", "modulename": "riix.core.base", "qualname": "OnlineRatingSystem.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.core.base.OnlineRatingSystem.predict", "modulename": "riix.core.base", "qualname": "OnlineRatingSystem.predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.core.base.OnlineRatingSystem.update", "modulename": "riix.core.base", "qualname": "OnlineRatingSystem.update", "kind": "function", "doc": "<p>Updates player ratings based on new matchup results.\nThis general update function processes a set of matchups and their outcomes to adjust player ratings within the model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray):</strong>  Array of matchups, where each matchup is represented by a pair of player indices</li>\n<li><strong>outcomes (np.ndarray):</strong>  Array of outcomes corresponding to each matchup represented as win (1), loss (0), or draw (0.5).</li>\n<li><strong>time_step (int):</strong>  The current time step or period of the rating update, used to adjust ratings over time.</li>\n<li><strong>use_cache (bool, optional):</strong>  Whether to use values cached during a prior call to predict() to speed up calculations. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">use_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.core.base.OnlineRatingSystem.batched_update", "modulename": "riix.core.base", "qualname": "OnlineRatingSystem.batched_update", "kind": "function", "doc": "<p>Performs a batched update of player ratings based on a series of matchups and their outcomes within a single time step.\nThis method processes all matchups as occuring simultaneously, leveraging vectorized operations for efficiency</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray):</strong>  Array of matchups, where each matchup is represented by a pair of player indices</li>\n<li><strong>outcomes (np.ndarray):</strong>  Array of outcomes corresponding to each matchup represented as win (1), loss (0), or draw (0.5).</li>\n<li><strong>time_step (int):</strong>  The current time step or period of the rating update, used to adjust ratings over time.</li>\n<li><strong>use_cache (bool, optional):</strong>  Whether to use values cached during a prior call to predict() to speed up calculations. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.core.base.OnlineRatingSystem.online_update", "modulename": "riix.core.base", "qualname": "OnlineRatingSystem.online_update", "kind": "function", "doc": "<p>Updates player ratings onlinely for each matchup and outcome pair within a given time step treating them as if they were sequential\nThis can be slower than batch processing but potentially more accurate by avoiding certain numerical issues</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray):</strong>  Array of matchups, where each matchup is represented by a pair of player indices</li>\n<li><strong>outcomes (np.ndarray):</strong>  Array of outcomes corresponding to each matchup represented as win (1), loss (0), or draw (0.5).</li>\n<li><strong>time_step (int):</strong>  The current time step or period of the rating update, used to adjust ratings over time.</li>\n<li><strong>use_cache (bool, optional):</strong>  Whether to use values cached during a prior call to predict() to speed up calculations. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.core.base.OnlineRatingSystem.get_pre_match_ratings", "modulename": "riix.core.base", "qualname": "OnlineRatingSystem.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "riix.core.base.OnlineRatingSystem.fit_batch", "modulename": "riix.core.base", "qualname": "OnlineRatingSystem.fit_batch", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_pre_match_probs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">return_pre_match_ratings</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "riix.core.base.OnlineRatingSystem.fit_dataset", "modulename": "riix.core.base", "qualname": "OnlineRatingSystem.fit_dataset", "kind": "function", "doc": "<p>evaluate a rating system on a dataset</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">riix</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">data_utils</span><span class=\"o\">.</span><span class=\"n\">TimedPairDataset</span>,</span><span class=\"param\">\t<span class=\"n\">return_pre_match_probs</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">return_pre_match_ratings</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.core.test", "modulename": "riix.core.test", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "riix.core.test.test", "modulename": "riix.core.test", "qualname": "test", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.eval", "modulename": "riix.eval", "kind": "module", "doc": "<p>utils for evaluating rating systems</p>\n"}, {"fullname": "riix.eval.evaluate", "modulename": "riix.eval", "qualname": "evaluate", "kind": "function", "doc": "<p>evaluate a rating system on a dataset</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">riix</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">OnlineRatingSystem</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">riix</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">data_utils</span><span class=\"o\">.</span><span class=\"n\">TimedPairDataset</span>,</span><span class=\"param\">\t<span class=\"n\">metrics_mask</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.eval.eval_wrapper", "modulename": "riix.eval", "qualname": "eval_wrapper", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span>, </span><span class=\"param\"><span class=\"n\">rating_system_class</span>, </span><span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">metrics_mask</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.eval.grid_search", "modulename": "riix.eval", "qualname": "grid_search", "kind": "function", "doc": "<p>Perform grid search and return the best hyperparameters.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">rating_system_class</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span>,</span><span class=\"param\">\t<span class=\"n\">metrics_mask</span>,</span><span class=\"param\">\t<span class=\"n\">param_configurations</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metric</span><span class=\"o\">=</span><span class=\"s1\">&#39;log_loss&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">minimize_metric</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">num_processes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">return_all_metrics</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.metrics", "modulename": "riix.metrics", "kind": "module", "doc": "<p>module for computing metrics for rating system experiments</p>\n"}, {"fullname": "riix.metrics.binary_accuracy", "modulename": "riix.metrics", "qualname": "binary_accuracy", "kind": "function", "doc": "<p>compute accuracy where outcomes is binary ties count for half</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probs</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "riix.metrics.accuracy_without_draws", "modulename": "riix.metrics", "qualname": "accuracy_without_draws", "kind": "function", "doc": "<p>compute binary accuracy after first filtering out rows where the label is a draw</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probs</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "riix.metrics.accuracy_with_draws", "modulename": "riix.metrics", "qualname": "accuracy_with_draws", "kind": "function", "doc": "<p>computes accuracy while allowing for ties</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probs</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">draw_margin</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "riix.metrics.binary_log_loss", "modulename": "riix.metrics", "qualname": "binary_log_loss", "kind": "function", "doc": "<p>compute log loss where outcome is binary 1.0 or 0.0</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">probs</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "riix.metrics.brier_score", "modulename": "riix.metrics", "qualname": "brier_score", "kind": "function", "doc": "<p>compute the brier score, which is equivalent to the MSE</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probs</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "riix.metrics.binary_metrics_suite", "modulename": "riix.metrics", "qualname": "binary_metrics_suite", "kind": "function", "doc": "<p>a wrapper class for running a bunch of binary metrics</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">probs</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models", "modulename": "riix.models", "kind": "module", "doc": "<h1 id=\"models-module\">Models Module</h1>\n\n<p>This module contains implementations of various rating systems used to evaluate and compare the performance of competitors in games or sports. Each system provides a unique approach to calculating ratings, taking into account factors such as game outcomes, player volatility, and more.</p>\n\n<p>Included Rating Systems:</p>\n\n<ul>\n<li>Elo: A simple and widely used rating system that adjusts player ratings based on match outcomes.</li>\n<li>Elomentum: Enhances the Elo system by incorporating momentum into rating adjustments.</li>\n<li>Glicko: An advanced system extending Elo by introducing rating deviation and volatility.</li>\n<li>online Markov: Uses Markov assumptions for online rating updates.</li>\n<li>Melo: A variation of the Elo rating system with multidimensional representations.</li>\n<li>Online Disc Decomposition: A machine learning approach for rating updates.</li>\n<li>SKF: Implements simplified Kalman filters for rating estimation.</li>\n<li>Temporal Massey: A temporal adaptation of the Massey rating system.</li>\n<li>TrueSkill: A Bayesian rating system developed by Microsoft.</li>\n<li>Velo: A variant of the Elo system with variance.</li>\n<li>Weng-Lin Bradley-Terry: A Bayesian online rating system using the Bradley-Terry (logistic) model.</li>\n<li>Weng-Lin Thurstone-Mosteller: A Bayesian online rating system using the Thurstone-Mosteller (gaussian) model.</li>\n</ul>\n\n<p>Each rating system is implemented as a class with methods for initializing the system, updating player ratings based on game outcomes, and calculating expected scores between players. These classes are designed for use in online rating systems where ratings are updated continuously as games are played.</p>\n\n<p>This module also provides utility functions and constants used across different rating systems, such as mathematical functions for calculating expected scores and scaling factors.</p>\n"}, {"fullname": "riix.models.autograd_rating_system", "modulename": "riix.models.autograd_rating_system", "kind": "module", "doc": "<p>A general class implementing online gradient based rating systems on differentiable likelihoods</p>\n"}, {"fullname": "riix.models.autograd_rating_system.AutogradRatingSystem", "modulename": "riix.models.autograd_rating_system", "qualname": "AutogradRatingSystem", "kind": "class", "doc": "<p>update the ratings using gradients</p>\n", "bases": "riix.core.base.OnlineRatingSystem"}, {"fullname": "riix.models.autograd_rating_system.AutogradRatingSystem.__init__", "modulename": "riix.models.autograd_rating_system", "qualname": "AutogradRatingSystem.__init__", "kind": "function", "doc": "<p>Initialize the rating system</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">cdf</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">cdf</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">173.71779276130073</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">32.0</span>,</span><span class=\"param\">\t<span class=\"n\">initial_rating</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1500.0</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;jax.numpy.float32&#x27;&gt;</span>)</span>"}, {"fullname": "riix.models.autograd_rating_system.AutogradRatingSystem.rating_dim", "modulename": "riix.models.autograd_rating_system", "qualname": "AutogradRatingSystem.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "riix.models.autograd_rating_system.AutogradRatingSystem.ratings", "modulename": "riix.models.autograd_rating_system", "qualname": "AutogradRatingSystem.ratings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.autograd_rating_system.AutogradRatingSystem.cdf", "modulename": "riix.models.autograd_rating_system", "qualname": "AutogradRatingSystem.cdf", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.autograd_rating_system.AutogradRatingSystem.scale", "modulename": "riix.models.autograd_rating_system", "qualname": "AutogradRatingSystem.scale", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.autograd_rating_system.AutogradRatingSystem.predict_fn", "modulename": "riix.models.autograd_rating_system", "qualname": "AutogradRatingSystem.predict_fn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.autograd_rating_system.AutogradRatingSystem.grad_fn", "modulename": "riix.models.autograd_rating_system", "qualname": "AutogradRatingSystem.grad_fn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.autograd_rating_system.AutogradRatingSystem.learning_rate", "modulename": "riix.models.autograd_rating_system", "qualname": "AutogradRatingSystem.learning_rate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.autograd_rating_system.AutogradRatingSystem.predict", "modulename": "riix.models.autograd_rating_system", "qualname": "AutogradRatingSystem.predict", "kind": "function", "doc": "<p>Generates predictions for a series of matchups between competitors.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.autograd_rating_system.AutogradRatingSystem.get_pre_match_ratings", "modulename": "riix.models.autograd_rating_system", "qualname": "AutogradRatingSystem.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.autograd_rating_system.AutogradRatingSystem.batched_update", "modulename": "riix.models.autograd_rating_system", "qualname": "AutogradRatingSystem.batched_update", "kind": "function", "doc": "<p>Apply a single update based on all results of the rating period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups:</strong>  Matchup information for the rating period.</li>\n<li><strong>outcomes:</strong>  Results of the matchups.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.autograd_rating_system.AutogradRatingSystem.online_update", "modulename": "riix.models.autograd_rating_system", "qualname": "AutogradRatingSystem.online_update", "kind": "function", "doc": "<p>Treats the matchups in the rating period as sequential events.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups:</strong>  Sequential matchups in the rating period.</li>\n<li><strong>outcomes:</strong>  Results of each matchup.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.autograd_rating_system.AutogradRatingSystem.print_leaderboard", "modulename": "riix.models.autograd_rating_system", "qualname": "AutogradRatingSystem.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.baselines", "modulename": "riix.models.baselines", "kind": "module", "doc": "<p>Baseline rating systems</p>\n"}, {"fullname": "riix.models.baselines.BaselineRatingSystem", "modulename": "riix.models.baselines", "qualname": "BaselineRatingSystem", "kind": "class", "doc": "<p>put a docstring</p>\n", "bases": "riix.core.base.OnlineRatingSystem"}, {"fullname": "riix.models.baselines.BaselineRatingSystem.__init__", "modulename": "riix.models.baselines", "qualname": "BaselineRatingSystem.__init__", "kind": "function", "doc": "<p>Initialize the rating system</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;win_rate&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;wins&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;appearances&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;random&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">temperature</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "riix.models.baselines.BaselineRatingSystem.rating_dim", "modulename": "riix.models.baselines", "qualname": "BaselineRatingSystem.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "riix.models.baselines.BaselineRatingSystem.mode", "modulename": "riix.models.baselines", "qualname": "BaselineRatingSystem.mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.baselines.BaselineRatingSystem.temperature", "modulename": "riix.models.baselines", "qualname": "BaselineRatingSystem.temperature", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.baselines.BaselineRatingSystem.rng", "modulename": "riix.models.baselines", "qualname": "BaselineRatingSystem.rng", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.baselines.BaselineRatingSystem.wins", "modulename": "riix.models.baselines", "qualname": "BaselineRatingSystem.wins", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.baselines.BaselineRatingSystem.appearances", "modulename": "riix.models.baselines", "qualname": "BaselineRatingSystem.appearances", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.baselines.BaselineRatingSystem.predict", "modulename": "riix.models.baselines", "qualname": "BaselineRatingSystem.predict", "kind": "function", "doc": "<p>Generates predictions for a series of matchups between competitors.\nAssumes a reparameterized Bradley-Terry model of p(i &gt; j) = sigmoid(temperature * (strength_i - strength_j))\nThe strengths are either based on count statistics such as wins, appearances, or win-rate, or randomly</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.baselines.BaselineRatingSystem.get_pre_match_ratings", "modulename": "riix.models.baselines", "qualname": "BaselineRatingSystem.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.baselines.BaselineRatingSystem.update", "modulename": "riix.models.baselines", "qualname": "BaselineRatingSystem.update", "kind": "function", "doc": "<p>Apply a single update based on all results of the rating period, </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups:</strong>  Matchup information for the rating period. Shape (N, 2)</li>\n<li><strong>outcomes:</strong>  Results of the matchups. Shape (N,)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.baselines.BaselineRatingSystem.print_leaderboard", "modulename": "riix.models.baselines", "qualname": "BaselineRatingSystem.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.constant_variance_glicko", "modulename": "riix.models.constant_variance_glicko", "kind": "module", "doc": "<p>Constant Variance Glicko\nMartin Ingram 2021\n<a href=\"https://www.researchgate.net/publication/348511584_How_to_extend_Elo_a_Bayesian_perspective\">https://www.researchgate.net/publication/348511584_How_to_extend_Elo_a_Bayesian_perspective</a></p>\n"}, {"fullname": "riix.models.constant_variance_glicko.ConstantVarianceGlicko", "modulename": "riix.models.constant_variance_glicko", "qualname": "ConstantVarianceGlicko", "kind": "class", "doc": "<p>Glicko but all competitors have equal and unchanging variance</p>\n", "bases": "riix.core.base.OnlineRatingSystem"}, {"fullname": "riix.models.constant_variance_glicko.ConstantVarianceGlicko.__init__", "modulename": "riix.models.constant_variance_glicko", "qualname": "ConstantVarianceGlicko.__init__", "kind": "function", "doc": "<p>Initialize the rating system</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">initial_rating</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1500.0</span>,</span><span class=\"param\">\t<span class=\"n\">rd</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">81.7</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.005756462732485115</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;</span>)</span>"}, {"fullname": "riix.models.constant_variance_glicko.ConstantVarianceGlicko.rating_dim", "modulename": "riix.models.constant_variance_glicko", "qualname": "ConstantVarianceGlicko.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "riix.models.constant_variance_glicko.ConstantVarianceGlicko.ratings", "modulename": "riix.models.constant_variance_glicko", "qualname": "ConstantVarianceGlicko.ratings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.constant_variance_glicko.ConstantVarianceGlicko.rd", "modulename": "riix.models.constant_variance_glicko", "qualname": "ConstantVarianceGlicko.rd", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.constant_variance_glicko.ConstantVarianceGlicko.b", "modulename": "riix.models.constant_variance_glicko", "qualname": "ConstantVarianceGlicko.b", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.constant_variance_glicko.ConstantVarianceGlicko.b2", "modulename": "riix.models.constant_variance_glicko", "qualname": "ConstantVarianceGlicko.b2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.constant_variance_glicko.ConstantVarianceGlicko.rd2_inv", "modulename": "riix.models.constant_variance_glicko", "qualname": "ConstantVarianceGlicko.rd2_inv", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.constant_variance_glicko.ConstantVarianceGlicko.g_rd", "modulename": "riix.models.constant_variance_glicko", "qualname": "ConstantVarianceGlicko.g_rd", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.constant_variance_glicko.ConstantVarianceGlicko.b_g_rd", "modulename": "riix.models.constant_variance_glicko", "qualname": "ConstantVarianceGlicko.b_g_rd", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.constant_variance_glicko.ConstantVarianceGlicko.b2_g_rd2", "modulename": "riix.models.constant_variance_glicko", "qualname": "ConstantVarianceGlicko.b2_g_rd2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.constant_variance_glicko.ConstantVarianceGlicko.predict", "modulename": "riix.models.constant_variance_glicko", "qualname": "ConstantVarianceGlicko.predict", "kind": "function", "doc": "<p>Generates predictions for a series of matchups between competitors.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.constant_variance_glicko.ConstantVarianceGlicko.get_pre_match_ratings", "modulename": "riix.models.constant_variance_glicko", "qualname": "ConstantVarianceGlicko.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.constant_variance_glicko.ConstantVarianceGlicko.batched_update", "modulename": "riix.models.constant_variance_glicko", "qualname": "ConstantVarianceGlicko.batched_update", "kind": "function", "doc": "<p>Apply a single update based on all results of the rating period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups:</strong>  Matchup information for the rating period.</li>\n<li><strong>outcomes:</strong>  Results of the matchups.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.constant_variance_glicko.ConstantVarianceGlicko.online_update", "modulename": "riix.models.constant_variance_glicko", "qualname": "ConstantVarianceGlicko.online_update", "kind": "function", "doc": "<p>Treats the matchups in the rating period as sequential events.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups:</strong>  Sequential matchups in the rating period.</li>\n<li><strong>outcomes:</strong>  Results of each matchup.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.constant_variance_glicko.ConstantVarianceGlicko.print_leaderboard", "modulename": "riix.models.constant_variance_glicko", "qualname": "ConstantVarianceGlicko.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elo", "modulename": "riix.models.elo", "kind": "module", "doc": "<p>The Elo rating system</p>\n"}, {"fullname": "riix.models.elo.Elo", "modulename": "riix.models.elo", "qualname": "Elo", "kind": "class", "doc": "<p>Implements the original Elo rating system.</p>\n", "bases": "riix.core.base.OnlineRatingSystem"}, {"fullname": "riix.models.elo.Elo.__init__", "modulename": "riix.models.elo", "qualname": "Elo.__init__", "kind": "function", "doc": "<p>Initializes the Elo rating system with the given parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>competitors (list):</strong>  A list of competitors to be rated within the system.</li>\n<li><strong>initial_rating (float, optional):</strong>  The initial Elo rating for new competitors. Defaults to 1500.0.</li>\n<li><strong>k (float, optional):</strong>  The K-factor, which controls the rate at which ratings change. Defaults to 32.0.</li>\n<li><strong>alpha (float, optional):</strong>  Scaling factor used in the calculation of expected scores. Defaults to log(10) / 400.</li>\n<li><strong>update_method (str, optional):</strong>  Method used to update ratings ('online' or other methods if implemented). Defaults to 'online'.</li>\n<li><strong>dtype:</strong>  The data type for internal numpy computations. Defaults to np.float64.</li>\n</ul>\n\n<p>Initializes an Elo rating system with customizable settings for initial ratings, K-factor, and update method.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">initial_rating</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1500.0</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">32.0</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.005756462732485115</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;</span>)</span>"}, {"fullname": "riix.models.elo.Elo.rating_dim", "modulename": "riix.models.elo", "qualname": "Elo.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "riix.models.elo.Elo.k", "modulename": "riix.models.elo", "qualname": "Elo.k", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.elo.Elo.alpha", "modulename": "riix.models.elo", "qualname": "Elo.alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.elo.Elo.ratings", "modulename": "riix.models.elo", "qualname": "Elo.ratings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.elo.Elo.cache", "modulename": "riix.models.elo", "qualname": "Elo.cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.elo.Elo.predict", "modulename": "riix.models.elo", "qualname": "Elo.predict", "kind": "function", "doc": "<p>Generates predictions for a series of matchups between competitors.</p>\n\n<p>This method calculates the probability of the first competitor in each matchup winning\nbased on their Elo ratings. The probabilities are computed using the sigmoid function\napplied to the rating differences, scaled by the alpha parameter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray):</strong>  A NumPy array of matchups, where each row represents a matchup\nand contains two integers indicating the indices of the competitors\nin the 'ratings' array.</li>\n<li><strong>time_step (int, optional):</strong>  A time step at which the predictions are made. This parameter\nis not used in the current implementation but can be utilized\nfor time-dependent predictions. Defaults to None.</li>\n<li><strong>set_cache (bool, optional):</strong>  If True, caches the computed probabilities in the 'cache'\nattribute under the key 'probs'. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: A NumPy array containing the predicted probabilities for the first competitor\n              in each matchup winning against the second.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elo.Elo.get_pre_match_ratings", "modulename": "riix.models.elo", "qualname": "Elo.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elo.Elo.batched_update", "modulename": "riix.models.elo", "qualname": "Elo.batched_update", "kind": "function", "doc": "<p>Apply a single update based on all results of the rating period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups:</strong>  Matchup information for the rating period.</li>\n<li><strong>outcomes:</strong>  Results of the matchups.</li>\n<li><strong>use_cache:</strong>  Flag to use cached probabilities or calculate anew.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elo.Elo.online_update", "modulename": "riix.models.elo", "qualname": "Elo.online_update", "kind": "function", "doc": "<p>Treats the matchups in the rating period as sequential events.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups:</strong>  Sequential matchups in the rating period.</li>\n<li><strong>outcomes:</strong>  Results of each matchup.</li>\n<li><strong>**kwargs:</strong>  Additional parameters (not used).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elo.Elo.print_leaderboard", "modulename": "riix.models.elo", "qualname": "Elo.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elo_davidson", "modulename": "riix.models.elo_davidson", "kind": "module", "doc": "<p>The Elo-Davidson rating system</p>\n"}, {"fullname": "riix.models.elo_davidson.EloDavidson", "modulename": "riix.models.elo_davidson", "qualname": "EloDavidson", "kind": "class", "doc": "<p>Implements the Elo-Davidson rating system from <a href=\"https://www.researchgate.net/publication/341384358_Understanding_Draws_in_Elo_Rating_Algorithm\">https://www.researchgate.net/publication/341384358_Understanding_Draws_in_Elo_Rating_Algorithm</a>\nThis method applies the method of handling draws proposed by Davidson to the \"online\" Elo rating system\nDavidson's paper: <a href=\"https://www.jstor.org/stable/2283595\">https://www.jstor.org/stable/2283595</a></p>\n", "bases": "riix.core.base.OnlineRatingSystem"}, {"fullname": "riix.models.elo_davidson.EloDavidson.__init__", "modulename": "riix.models.elo_davidson", "qualname": "EloDavidson.__init__", "kind": "function", "doc": "<p>Initializes the Elo rating system with the given parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>competitors (list):</strong>  A list of competitors to be rated within the system.</li>\n<li><strong>initial_rating (float, optional):</strong>  The initial Elo rating for new competitors. Defaults to 1500.0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">initial_rating</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">32.0</span>,</span><span class=\"param\">\t<span class=\"n\">kappa</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">base</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">10.0</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">200.0</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;</span>)</span>"}, {"fullname": "riix.models.elo_davidson.EloDavidson.rating_dim", "modulename": "riix.models.elo_davidson", "qualname": "EloDavidson.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "riix.models.elo_davidson.EloDavidson.k", "modulename": "riix.models.elo_davidson", "qualname": "EloDavidson.k", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.elo_davidson.EloDavidson.kappa", "modulename": "riix.models.elo_davidson", "qualname": "EloDavidson.kappa", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.elo_davidson.EloDavidson.kappa_over_2", "modulename": "riix.models.elo_davidson", "qualname": "EloDavidson.kappa_over_2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.elo_davidson.EloDavidson.alpha", "modulename": "riix.models.elo_davidson", "qualname": "EloDavidson.alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.elo_davidson.EloDavidson.ratings", "modulename": "riix.models.elo_davidson", "qualname": "EloDavidson.ratings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.elo_davidson.EloDavidson.predict", "modulename": "riix.models.elo_davidson", "qualname": "EloDavidson.predict", "kind": "function", "doc": "<p>Generates predictions for a series of matchups between competitors.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray):</strong>  A NumPy array of matchups, where each row represents a matchup\nand contains two integers indicating the indices of the competitors\nin the 'ratings' array.</li>\n<li><strong>time_step (int, optional):</strong>  A time step at which the predictions are made. This parameter\nis not used in the current implementation but can be utilized\nfor time-dependent predictions. Defaults to None.</li>\n<li><strong>set_cache (bool, optional):</strong>  If True, caches the computed probabilities in the 'cache'\nattribute under the key 'probs'. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: A NumPy array containing the predicted probabilities for the first competitor\n              in each matchup winning against the second.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elo_davidson.EloDavidson.get_pre_match_ratings", "modulename": "riix.models.elo_davidson", "qualname": "EloDavidson.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elo_davidson.EloDavidson.batched_update", "modulename": "riix.models.elo_davidson", "qualname": "EloDavidson.batched_update", "kind": "function", "doc": "<p>Apply a single update based on all results of the rating period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups:</strong>  Matchup information for the rating period.</li>\n<li><strong>outcomes:</strong>  Results of the matchups.</li>\n<li><strong>use_cache:</strong>  Flag to use cached probabilities or calculate anew.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elo_davidson.EloDavidson.online_update", "modulename": "riix.models.elo_davidson", "qualname": "EloDavidson.online_update", "kind": "function", "doc": "<p>Treats the matchups in the rating period as sequential events.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups:</strong>  Sequential matchups in the rating period.</li>\n<li><strong>outcomes:</strong>  Results of each matchup.</li>\n<li><strong>**kwargs:</strong>  Additional parameters (not used).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elo_davidson.EloDavidson.print_leaderboard", "modulename": "riix.models.elo_davidson", "qualname": "EloDavidson.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elomentum", "modulename": "riix.models.elomentum", "kind": "module", "doc": "<p>Elo + Momentum\nInvented by Clayton Thorrez (me)</p>\n"}, {"fullname": "riix.models.elomentum.EloMentum", "modulename": "riix.models.elomentum", "qualname": "EloMentum", "kind": "class", "doc": "<p>Elo with momentum!</p>\n", "bases": "riix.models.elo.Elo"}, {"fullname": "riix.models.elomentum.EloMentum.__init__", "modulename": "riix.models.elomentum", "qualname": "EloMentum.__init__", "kind": "function", "doc": "<p>Initializes the Elo rating system with the given parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>competitors (list):</strong>  A list of competitors to be rated within the system.</li>\n<li><strong>initial_rating (float, optional):</strong>  The initial Elo rating for new competitors. Defaults to 1500.0.</li>\n<li><strong>k (float, optional):</strong>  The K-factor, which controls the rate at which ratings change. Defaults to 32.0.</li>\n<li><strong>alpha (float, optional):</strong>  Scaling factor used in the calculation of expected scores. Defaults to log(10) / 400.</li>\n<li><strong>update_method (str, optional):</strong>  Method used to update ratings ('online' or other methods if implemented). Defaults to 'online'.</li>\n<li><strong>dtype:</strong>  The data type for internal numpy computations. Defaults to np.float64.</li>\n</ul>\n\n<p>Initializes an Elo rating system with customizable settings for initial ratings, K-factor, and update method.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">initial_rating</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1500.0</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">32.0</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.005756462732485115</span>,</span><span class=\"param\">\t<span class=\"n\">momentum</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">momentum_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;nesterov&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">epsilon</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-08</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;</span>)</span>"}, {"fullname": "riix.models.elomentum.EloMentum.rating_dim", "modulename": "riix.models.elomentum", "qualname": "EloMentum.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "riix.models.elomentum.EloMentum.k", "modulename": "riix.models.elomentum", "qualname": "EloMentum.k", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.elomentum.EloMentum.alpha", "modulename": "riix.models.elomentum", "qualname": "EloMentum.alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.elomentum.EloMentum.momentum", "modulename": "riix.models.elomentum", "qualname": "EloMentum.momentum", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.elomentum.EloMentum.epsilon", "modulename": "riix.models.elomentum", "qualname": "EloMentum.epsilon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.elomentum.EloMentum.ratings", "modulename": "riix.models.elomentum", "qualname": "EloMentum.ratings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.elomentum.EloMentum.v", "modulename": "riix.models.elomentum", "qualname": "EloMentum.v", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.elomentum.EloMentum.cache", "modulename": "riix.models.elomentum", "qualname": "EloMentum.cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.elomentum.EloMentum.get_pre_match_ratings", "modulename": "riix.models.elomentum", "qualname": "EloMentum.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elomentum.EloMentum.predict", "modulename": "riix.models.elomentum", "qualname": "EloMentum.predict", "kind": "function", "doc": "<p>generate predictions</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elomentum.EloMentum.update", "modulename": "riix.models.elomentum", "qualname": "EloMentum.update", "kind": "function", "doc": "<p>Updates player ratings based on new matchup results.\nThis general update function processes a set of matchups and their outcomes to adjust player ratings within the model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray):</strong>  Array of matchups, where each matchup is represented by a pair of player indices</li>\n<li><strong>outcomes (np.ndarray):</strong>  Array of outcomes corresponding to each matchup represented as win (1), loss (0), or draw (0.5).</li>\n<li><strong>time_step (int):</strong>  The current time step or period of the rating update, used to adjust ratings over time.</li>\n<li><strong>use_cache (bool, optional):</strong>  Whether to use values cached during a prior call to predict() to speed up calculations. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">outcomes</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">use_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elomentum.EloMentum.get_momentum_update", "modulename": "riix.models.elomentum", "qualname": "EloMentum.get_momentum_update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span>, </span><span class=\"param\"><span class=\"n\">g</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elomentum.EloMentum.get_nesterov_momentum_update", "modulename": "riix.models.elomentum", "qualname": "EloMentum.get_nesterov_momentum_update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span>, </span><span class=\"param\"><span class=\"n\">g</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elomentum.EloMentum.get_adam_update", "modulename": "riix.models.elomentum", "qualname": "EloMentum.get_adam_update", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span>, </span><span class=\"param\"><span class=\"n\">g</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elomentum.EloMentum.batched_update", "modulename": "riix.models.elomentum", "qualname": "EloMentum.batched_update", "kind": "function", "doc": "<p>apply one update based on all of the results of the rating period</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.elomentum.EloMentum.online_update", "modulename": "riix.models.elomentum", "qualname": "EloMentum.online_update", "kind": "function", "doc": "<p>treat the matchups in the rating period as if they were sequential</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.gen_elo", "modulename": "riix.models.gen_elo", "kind": "module", "doc": "<p>Bayesian generalization of Elo by Martin Ingram\n<a href=\"https://www.researchgate.net/publication/348511584_How_to_extend_Elo_a_Bayesian_perspective\">https://www.researchgate.net/publication/348511584_How_to_extend_Elo_a_Bayesian_perspective</a>\nequations 17-19 are relevant for the case without adding surface, and best-of effects</p>\n"}, {"fullname": "riix.models.gen_elo.GenElo", "modulename": "riix.models.gen_elo", "qualname": "GenElo", "kind": "class", "doc": "<p>Bayesian Generalized Elo from Ingram 2021</p>\n", "bases": "riix.core.base.OnlineRatingSystem"}, {"fullname": "riix.models.gen_elo.GenElo.__init__", "modulename": "riix.models.gen_elo", "qualname": "GenElo.__init__", "kind": "function", "doc": "<p>Initialize the rating system</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">initial_mu</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.005756462732485115</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">60.0</span>,</span><span class=\"param\">\t<span class=\"n\">use_approx</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;</span>)</span>"}, {"fullname": "riix.models.gen_elo.GenElo.rating_dim", "modulename": "riix.models.gen_elo", "qualname": "GenElo.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "riix.models.gen_elo.GenElo.mus", "modulename": "riix.models.gen_elo", "qualname": "GenElo.mus", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.gen_elo.GenElo.b", "modulename": "riix.models.gen_elo", "qualname": "GenElo.b", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.gen_elo.GenElo.b_over_2", "modulename": "riix.models.gen_elo", "qualname": "GenElo.b_over_2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.gen_elo.GenElo.b_squared", "modulename": "riix.models.gen_elo", "qualname": "GenElo.b_squared", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.gen_elo.GenElo.sigma_2_delta_inv", "modulename": "riix.models.gen_elo", "qualname": "GenElo.sigma_2_delta_inv", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.gen_elo.GenElo.predict", "modulename": "riix.models.gen_elo", "qualname": "GenElo.predict", "kind": "function", "doc": "<p>Generates predictions for a series of matchups between competitors.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.gen_elo.GenElo.get_pre_match_ratings", "modulename": "riix.models.gen_elo", "qualname": "GenElo.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.gen_elo.GenElo.batched_update", "modulename": "riix.models.gen_elo", "qualname": "GenElo.batched_update", "kind": "function", "doc": "<p>Apply a single update based on all results of the rating period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups:</strong>  Matchup information for the rating period.</li>\n<li><strong>outcomes:</strong>  Results of the matchups.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.gen_elo.GenElo.online_update", "modulename": "riix.models.gen_elo", "qualname": "GenElo.online_update", "kind": "function", "doc": "<p>Treats the matchups in the rating period as sequential events.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups:</strong>  Sequential matchups in the rating period.</li>\n<li><strong>outcomes:</strong>  Results of each matchup.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.gen_elo.GenElo.print_leaderboard", "modulename": "riix.models.gen_elo", "qualname": "GenElo.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko", "modulename": "riix.models.glicko", "kind": "module", "doc": "<p>Glicko</p>\n"}, {"fullname": "riix.models.glicko.Glicko", "modulename": "riix.models.glicko", "qualname": "Glicko", "kind": "class", "doc": "<p>Implements the original Glicko rating system, designed by Mark Glickman.</p>\n\n<p>This rating system is an improvement over the Elo rating system, introducing the concept of rating\ndeviation and volatility to better account for the uncertainty in a player's true strength.</p>\n", "bases": "riix.core.base.OnlineRatingSystem"}, {"fullname": "riix.models.glicko.Glicko.__init__", "modulename": "riix.models.glicko", "qualname": "Glicko.__init__", "kind": "function", "doc": "<p>Initializes the Glicko rating system with the given parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>competitors (list):</strong>  A list of competitors to be rated within the system.</li>\n<li><strong>initial_rating (float, optional):</strong>  The initial Glicko rating for new competitors. Defaults to 1500.0.</li>\n<li><strong>initial_rating_dev (float, optional):</strong>  The initial rating deviation for new competitors. Defaults to 350.0.</li>\n<li><strong>c (float, optional):</strong>  Constant used to adjust the rate of change of the rating deviation. Defaults to 63.2.</li>\n<li><strong>dtype (data-type, optional):</strong>  The desired data-type for the ratings and deviations arrays. Defaults to np.float64.</li>\n<li><strong>update_method (str, optional):</strong>  Method used for updating ratings ('online' or another specified method). Defaults to 'online'.</li>\n<li><strong>do_weird_prob (bool, optional):</strong>  If set to True, applies an alternative probability calculation. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">initial_rating</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1500.0</span>,</span><span class=\"param\">\t<span class=\"n\">initial_rating_dev</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">350.0</span>,</span><span class=\"param\">\t<span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">63.2</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">do_weird_prob</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "riix.models.glicko.Glicko.rating_dim", "modulename": "riix.models.glicko", "qualname": "Glicko.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "riix.models.glicko.Glicko.initial_rating_dev", "modulename": "riix.models.glicko", "qualname": "Glicko.initial_rating_dev", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.glicko.Glicko.c2", "modulename": "riix.models.glicko", "qualname": "Glicko.c2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.glicko.Glicko.ratings", "modulename": "riix.models.glicko", "qualname": "Glicko.ratings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.glicko.Glicko.rating_devs", "modulename": "riix.models.glicko", "qualname": "Glicko.rating_devs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.glicko.Glicko.has_played", "modulename": "riix.models.glicko", "qualname": "Glicko.has_played", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.glicko.Glicko.prev_time_step", "modulename": "riix.models.glicko", "qualname": "Glicko.prev_time_step", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.glicko.Glicko.do_weird_prob", "modulename": "riix.models.glicko", "qualname": "Glicko.do_weird_prob", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.glicko.Glicko.g_vector", "modulename": "riix.models.glicko", "qualname": "Glicko.g_vector", "kind": "function", "doc": "<p>Calculates the g function as part of the Glicko rating system.</p>\n\n<p>This function is used to scale the rating deviation, affecting the impact of a game outcome\nas a function of the opponent's rating volatility.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>rating_dev (float):</strong>  The rating deviation of an opponent.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The calculated g function result, used to scale the expected score between players.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rating_dev</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko.Glicko.g_scalar", "modulename": "riix.models.glicko", "qualname": "Glicko.g_scalar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">rating_dev</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko.Glicko.predict", "modulename": "riix.models.glicko", "qualname": "Glicko.predict", "kind": "function", "doc": "<p>generate predictions</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko.Glicko.get_pre_match_ratings", "modulename": "riix.models.glicko", "qualname": "Glicko.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko.Glicko.increase_rating_dev", "modulename": "riix.models.glicko", "qualname": "Glicko.increase_rating_dev", "kind": "function", "doc": "<p>called once per period to model the increase in variance over time</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_step</span>, </span><span class=\"param\"><span class=\"n\">matchups</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko.Glicko.batched_update", "modulename": "riix.models.glicko", "qualname": "Glicko.batched_update", "kind": "function", "doc": "<p>apply one update based on all of the results of the rating period</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">time_step</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko.Glicko.online_update", "modulename": "riix.models.glicko", "qualname": "Glicko.online_update", "kind": "function", "doc": "<p>treat the matchups in the rating period as if they were sequential</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">time_step</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko.Glicko.print_leaderboard", "modulename": "riix.models.glicko", "qualname": "Glicko.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko2", "modulename": "riix.models.glicko2", "kind": "module", "doc": "<p>Glicko 2\npaper: <a href=\"http://www.glicko.net/research/dpcmsv.pdf\">http://www.glicko.net/research/dpcmsv.pdf</a>\nexample: <a href=\"http://www.glicko.net/glicko/glicko2.pdf\">http://www.glicko.net/glicko/glicko2.pdf</a></p>\n"}, {"fullname": "riix.models.glicko2.Glicko2", "modulename": "riix.models.glicko2", "qualname": "Glicko2", "kind": "class", "doc": "<p>Implements the Glicko 2 rating system, designed by Mark Glickman.</p>\n", "bases": "riix.core.base.OnlineRatingSystem"}, {"fullname": "riix.models.glicko2.Glicko2.__init__", "modulename": "riix.models.glicko2", "qualname": "Glicko2.__init__", "kind": "function", "doc": "<p>Initializes the Glicko rating system with the given parameters.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">initial_rating</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1500.0</span>,</span><span class=\"param\">\t<span class=\"n\">initial_rd</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">350.0</span>,</span><span class=\"param\">\t<span class=\"n\">initial_sigma</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.06</span>,</span><span class=\"param\">\t<span class=\"n\">tau</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">epsilon</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-06</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;online&#39;</span></span>)</span>"}, {"fullname": "riix.models.glicko2.Glicko2.rating_dim", "modulename": "riix.models.glicko2", "qualname": "Glicko2.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "riix.models.glicko2.Glicko2.mus", "modulename": "riix.models.glicko2", "qualname": "Glicko2.mus", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.glicko2.Glicko2.initial_phi", "modulename": "riix.models.glicko2", "qualname": "Glicko2.initial_phi", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.glicko2.Glicko2.phis", "modulename": "riix.models.glicko2", "qualname": "Glicko2.phis", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.glicko2.Glicko2.sigmas", "modulename": "riix.models.glicko2", "qualname": "Glicko2.sigmas", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.glicko2.Glicko2.has_played", "modulename": "riix.models.glicko2", "qualname": "Glicko2.has_played", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.glicko2.Glicko2.prev_time_step", "modulename": "riix.models.glicko2", "qualname": "Glicko2.prev_time_step", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.glicko2.Glicko2.tau", "modulename": "riix.models.glicko2", "qualname": "Glicko2.tau", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.glicko2.Glicko2.tau2", "modulename": "riix.models.glicko2", "qualname": "Glicko2.tau2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.glicko2.Glicko2.epsilon", "modulename": "riix.models.glicko2", "qualname": "Glicko2.epsilon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.glicko2.Glicko2.g_scalar", "modulename": "riix.models.glicko2", "qualname": "Glicko2.g_scalar", "kind": "function", "doc": "<p>this is DIFFERENT from g in regular Glicko</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">phi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko2.Glicko2.g_vector", "modulename": "riix.models.glicko2", "qualname": "Glicko2.g_vector", "kind": "function", "doc": "<p>vector version</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">phi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko2.Glicko2.predict", "modulename": "riix.models.glicko2", "qualname": "Glicko2.predict", "kind": "function", "doc": "<p>generate predictions</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko2.Glicko2.get_pre_match_ratings", "modulename": "riix.models.glicko2", "qualname": "Glicko2.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko2.Glicko2.increase_rating_dev", "modulename": "riix.models.glicko2", "qualname": "Glicko2.increase_rating_dev", "kind": "function", "doc": "<p>called once per period to model the increase in variance over time</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_step</span>, </span><span class=\"param\"><span class=\"n\">matchups</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko2.Glicko2.batched_update", "modulename": "riix.models.glicko2", "qualname": "Glicko2.batched_update", "kind": "function", "doc": "<p>apply one update based on all of the results of the rating period</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">time_step</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko2.Glicko2.f", "modulename": "riix.models.glicko2", "qualname": "Glicko2.f", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">delta2</span>, </span><span class=\"param\"><span class=\"n\">phi2</span>, </span><span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">a</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko2.Glicko2.get_sigma_prime", "modulename": "riix.models.glicko2", "qualname": "Glicko2.get_sigma_prime", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">phi</span>, </span><span class=\"param\"><span class=\"n\">delta</span>, </span><span class=\"param\"><span class=\"n\">v</span>, </span><span class=\"param\"><span class=\"n\">sigma</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko2.Glicko2.online_update", "modulename": "riix.models.glicko2", "qualname": "Glicko2.online_update", "kind": "function", "doc": "<p>treat the matchups in the rating period as if they were sequential</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">time_step</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.glicko2.Glicko2.print_leaderboard", "modulename": "riix.models.glicko2", "qualname": "Glicko2.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.online_markov", "modulename": "riix.models.online_markov", "kind": "module", "doc": "<p>online Markov Method\n<a href=\"https://www.degruyter.com/document/doi/10.1515/jqas-2019-0070\">https://www.degruyter.com/document/doi/10.1515/jqas-2019-0070</a></p>\n"}, {"fullname": "riix.models.online_markov.onlineMarkov", "modulename": "riix.models.online_markov", "qualname": "onlineMarkov", "kind": "class", "doc": "<p>online Markov rating system</p>\n", "bases": "riix.models.elo.Elo"}, {"fullname": "riix.models.online_markov.onlineMarkov.__init__", "modulename": "riix.models.online_markov", "qualname": "onlineMarkov.__init__", "kind": "function", "doc": "<p>Initializes the Elo rating system with the given parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>competitors (list):</strong>  A list of competitors to be rated within the system.</li>\n<li><strong>initial_rating (float, optional):</strong>  The initial Elo rating for new competitors. Defaults to 1500.0.</li>\n<li><strong>k (float, optional):</strong>  The K-factor, which controls the rate at which ratings change. Defaults to 32.0.</li>\n<li><strong>alpha (float, optional):</strong>  Scaling factor used in the calculation of expected scores. Defaults to log(10) / 400.</li>\n<li><strong>update_method (str, optional):</strong>  Method used to update ratings ('online' or other methods if implemented). Defaults to 'online'.</li>\n<li><strong>dtype:</strong>  The data type for internal numpy computations. Defaults to np.float64.</li>\n</ul>\n\n<p>Initializes an Elo rating system with customizable settings for initial ratings, K-factor, and update method.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">initial_rating</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">weight_with_prob</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;</span>)</span>"}, {"fullname": "riix.models.online_markov.onlineMarkov.rating_dim", "modulename": "riix.models.online_markov", "qualname": "onlineMarkov.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "riix.models.online_markov.onlineMarkov.c", "modulename": "riix.models.online_markov", "qualname": "onlineMarkov.c", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.online_markov.onlineMarkov.weight_with_prob", "modulename": "riix.models.online_markov", "qualname": "onlineMarkov.weight_with_prob", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.online_markov.onlineMarkov.ratings", "modulename": "riix.models.online_markov", "qualname": "onlineMarkov.ratings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.online_markov.onlineMarkov.cache", "modulename": "riix.models.online_markov", "qualname": "onlineMarkov.cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.online_markov.onlineMarkov.get_pre_match_ratings", "modulename": "riix.models.online_markov", "qualname": "onlineMarkov.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.online_markov.onlineMarkov.predict", "modulename": "riix.models.online_markov", "qualname": "onlineMarkov.predict", "kind": "function", "doc": "<p>generate predictions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.online_markov.onlineMarkov.batched_update", "modulename": "riix.models.online_markov", "qualname": "onlineMarkov.batched_update", "kind": "function", "doc": "<p>apply one update based on all of the results of the rating period</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.online_markov.onlineMarkov.online_update", "modulename": "riix.models.online_markov", "qualname": "onlineMarkov.online_update", "kind": "function", "doc": "<p>treat the matchups in the rating period as if they were sequential</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.melo", "modulename": "riix.models.melo", "kind": "module", "doc": "<p>Multidimensional Elo</p>\n"}, {"fullname": "riix.models.melo.generate_orthogonal_matrix", "modulename": "riix.models.melo", "qualname": "generate_orthogonal_matrix", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"n\">k</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.melo.Melo", "modulename": "riix.models.melo", "qualname": "Melo", "kind": "class", "doc": "<p>Multidimensional Elo rating system, (good for rock paper scissors problems)</p>\n", "bases": "riix.models.elo.Elo"}, {"fullname": "riix.models.melo.Melo.__init__", "modulename": "riix.models.melo", "qualname": "Melo.__init__", "kind": "function", "doc": "<p>Initializes the Elo rating system with the given parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>competitors (list):</strong>  A list of competitors to be rated within the system.</li>\n<li><strong>initial_rating (float, optional):</strong>  The initial Elo rating for new competitors. Defaults to 1500.0.</li>\n<li><strong>k (float, optional):</strong>  The K-factor, which controls the rate at which ratings change. Defaults to 32.0.</li>\n<li><strong>alpha (float, optional):</strong>  Scaling factor used in the calculation of expected scores. Defaults to log(10) / 400.</li>\n<li><strong>update_method (str, optional):</strong>  Method used to update ratings ('online' or other methods if implemented). Defaults to 'online'.</li>\n<li><strong>dtype:</strong>  The data type for internal numpy computations. Defaults to np.float64.</li>\n</ul>\n\n<p>Initializes an Elo rating system with customizable settings for initial ratings, K-factor, and update method.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">initial_rating</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1500.0</span>,</span><span class=\"param\">\t<span class=\"n\">dimension</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">eta_r</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">32.0</span>,</span><span class=\"param\">\t<span class=\"n\">eta_c</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.125</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.005756462732485115</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;</span>)</span>"}, {"fullname": "riix.models.melo.Melo.rating_dim", "modulename": "riix.models.melo", "qualname": "Melo.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "riix.models.melo.Melo.eta_r", "modulename": "riix.models.melo", "qualname": "Melo.eta_r", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.melo.Melo.eta_c", "modulename": "riix.models.melo", "qualname": "Melo.eta_c", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.melo.Melo.alpha", "modulename": "riix.models.melo", "qualname": "Melo.alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.melo.Melo.ratings", "modulename": "riix.models.melo", "qualname": "Melo.ratings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.melo.Melo.c", "modulename": "riix.models.melo", "qualname": "Melo.c", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.melo.Melo.omega", "modulename": "riix.models.melo", "qualname": "Melo.omega", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.melo.Melo.cache", "modulename": "riix.models.melo", "qualname": "Melo.cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.melo.Melo.get_pre_match_ratings", "modulename": "riix.models.melo", "qualname": "Melo.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.melo.Melo.predict", "modulename": "riix.models.melo", "qualname": "Melo.predict", "kind": "function", "doc": "<p>generate predictions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.melo.Melo.batched_update", "modulename": "riix.models.melo", "qualname": "Melo.batched_update", "kind": "function", "doc": "<p>apply one update based on all of the results of the rating period</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">time_step</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.melo.Melo.online_update", "modulename": "riix.models.melo", "qualname": "Melo.online_update", "kind": "function", "doc": "<p>treat the matchups in the rating period as if they were sequential</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.online_disc_decomp", "modulename": "riix.models.online_disc_decomp", "kind": "module", "doc": "<p>Online version of the Disc Decomposition rating system\n<a href=\"https://proceedings.mlr.press/v206/bertrand23a.html\">https://proceedings.mlr.press/v206/bertrand23a.html</a>\nequations 8 and 9</p>\n"}, {"fullname": "riix.models.online_disc_decomp.OnlineDiscDecomp", "modulename": "riix.models.online_disc_decomp", "qualname": "OnlineDiscDecomp", "kind": "class", "doc": "<p>Online Disc Decomposition</p>\n", "bases": "riix.core.base.OnlineRatingSystem"}, {"fullname": "riix.models.online_disc_decomp.OnlineDiscDecomp.__init__", "modulename": "riix.models.online_disc_decomp", "qualname": "OnlineDiscDecomp.__init__", "kind": "function", "doc": "<p>Initializes a new instance of an online rating system with a list of competitors.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>competitors (list):</strong>  A list of competitors to be included in the rating system. Each\ncompetitor should have a structure or identifier compatible with\nthe specific rating system's requirements.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">initial_u</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">initial_v</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">eta</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.02</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;</span>)</span>"}, {"fullname": "riix.models.online_disc_decomp.OnlineDiscDecomp.rating_dim", "modulename": "riix.models.online_disc_decomp", "qualname": "OnlineDiscDecomp.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "riix.models.online_disc_decomp.OnlineDiscDecomp.initial_u", "modulename": "riix.models.online_disc_decomp", "qualname": "OnlineDiscDecomp.initial_u", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.online_disc_decomp.OnlineDiscDecomp.initial_v", "modulename": "riix.models.online_disc_decomp", "qualname": "OnlineDiscDecomp.initial_v", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.online_disc_decomp.OnlineDiscDecomp.eta", "modulename": "riix.models.online_disc_decomp", "qualname": "OnlineDiscDecomp.eta", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.online_disc_decomp.OnlineDiscDecomp.us", "modulename": "riix.models.online_disc_decomp", "qualname": "OnlineDiscDecomp.us", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.online_disc_decomp.OnlineDiscDecomp.vs", "modulename": "riix.models.online_disc_decomp", "qualname": "OnlineDiscDecomp.vs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.online_disc_decomp.OnlineDiscDecomp.cache", "modulename": "riix.models.online_disc_decomp", "qualname": "OnlineDiscDecomp.cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.online_disc_decomp.OnlineDiscDecomp.get_pre_match_ratings", "modulename": "riix.models.online_disc_decomp", "qualname": "OnlineDiscDecomp.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.online_disc_decomp.OnlineDiscDecomp.predict", "modulename": "riix.models.online_disc_decomp", "qualname": "OnlineDiscDecomp.predict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.online_disc_decomp.OnlineDiscDecomp.batched_update", "modulename": "riix.models.online_disc_decomp", "qualname": "OnlineDiscDecomp.batched_update", "kind": "function", "doc": "<p>Performs a batched update of player ratings based on a series of matchups and their outcomes within a single time step.\nThis method processes all matchups as occuring simultaneously, leveraging vectorized operations for efficiency</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray):</strong>  Array of matchups, where each matchup is represented by a pair of player indices</li>\n<li><strong>outcomes (np.ndarray):</strong>  Array of outcomes corresponding to each matchup represented as win (1), loss (0), or draw (0.5).</li>\n<li><strong>time_step (int):</strong>  The current time step or period of the rating update, used to adjust ratings over time.</li>\n<li><strong>use_cache (bool, optional):</strong>  Whether to use values cached during a prior call to predict() to speed up calculations. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.online_disc_decomp.OnlineDiscDecomp.online_update", "modulename": "riix.models.online_disc_decomp", "qualname": "OnlineDiscDecomp.online_update", "kind": "function", "doc": "<p>Updates player ratings onlinely for each matchup and outcome pair within a given time step treating them as if they were sequential\nThis can be slower than batch processing but potentially more accurate by avoiding certain numerical issues</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray):</strong>  Array of matchups, where each matchup is represented by a pair of player indices</li>\n<li><strong>outcomes (np.ndarray):</strong>  Array of outcomes corresponding to each matchup represented as win (1), loss (0), or draw (0.5).</li>\n<li><strong>time_step (int):</strong>  The current time step or period of the rating update, used to adjust ratings over time.</li>\n<li><strong>use_cache (bool, optional):</strong>  Whether to use values cached during a prior call to predict() to speed up calculations. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.online_disc_decomp.OnlineDiscDecomp.print_leaderboard", "modulename": "riix.models.online_disc_decomp", "qualname": "OnlineDiscDecomp.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.online_rao_kupper", "modulename": "riix.models.online_rao_kupper", "kind": "module", "doc": "<p>The Online Rao Kupper rating system</p>\n"}, {"fullname": "riix.models.online_rao_kupper.OnlineRaoKupper", "modulename": "riix.models.online_rao_kupper", "qualname": "OnlineRaoKupper", "kind": "class", "doc": "<p>Implements an online version of the Rao Kupper model\nPerforms stochastic gradient ascent on the log likelihood of the Rao Kupper model\n<a href=\"https://encyclopediaofmath.org/wiki/Paired_comparison_model\">https://encyclopediaofmath.org/wiki/Paired_comparison_model</a>\n<a href=\"https://papers.nips.cc/paper_files/paper/2015/hash/2a38a4a9316c49e5a833517c45d31070-Abstract.html\">https://papers.nips.cc/paper_files/paper/2015/hash/2a38a4a9316c49e5a833517c45d31070-Abstract.html</a></p>\n", "bases": "riix.core.base.OnlineRatingSystem"}, {"fullname": "riix.models.online_rao_kupper.OnlineRaoKupper.__init__", "modulename": "riix.models.online_rao_kupper", "qualname": "OnlineRaoKupper.__init__", "kind": "function", "doc": "<p>Initializes the Elo rating system with the given parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>competitors (list):</strong>  A list of competitors to be rated within the system.</li>\n<li><strong>initial_rating (float, optional):</strong>  The initial Elo rating for new competitors. Defaults to 1500.0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">initial_rating</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">theta</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span>,</span><span class=\"param\">\t<span class=\"n\">step_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">32.0</span>,</span><span class=\"param\">\t<span class=\"n\">temperature</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.005756462732485115</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;</span>)</span>"}, {"fullname": "riix.models.online_rao_kupper.OnlineRaoKupper.rating_dim", "modulename": "riix.models.online_rao_kupper", "qualname": "OnlineRaoKupper.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "riix.models.online_rao_kupper.OnlineRaoKupper.theta", "modulename": "riix.models.online_rao_kupper", "qualname": "OnlineRaoKupper.theta", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.online_rao_kupper.OnlineRaoKupper.log_theta", "modulename": "riix.models.online_rao_kupper", "qualname": "OnlineRaoKupper.log_theta", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.online_rao_kupper.OnlineRaoKupper.step_size", "modulename": "riix.models.online_rao_kupper", "qualname": "OnlineRaoKupper.step_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.online_rao_kupper.OnlineRaoKupper.temperature", "modulename": "riix.models.online_rao_kupper", "qualname": "OnlineRaoKupper.temperature", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.online_rao_kupper.OnlineRaoKupper.ratings", "modulename": "riix.models.online_rao_kupper", "qualname": "OnlineRaoKupper.ratings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.online_rao_kupper.OnlineRaoKupper.predict", "modulename": "riix.models.online_rao_kupper", "qualname": "OnlineRaoKupper.predict", "kind": "function", "doc": "<p>Generates predictions for a series of matchups between competitors.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray):</strong>  A NumPy array of matchups, where each row represents a matchup\nand contains two integers indicating the indices of the competitors\nin the 'ratings' array.</li>\n<li><strong>time_step (int, optional):</strong>  A time step at which the predictions are made. This parameter\nis not used in the current implementation but can be utilized\nfor time-dependent predictions. Defaults to None.</li>\n<li><strong>set_cache (bool, optional):</strong>  If True, caches the computed probabilities in the 'cache'\nattribute under the key 'probs'. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: A NumPy array containing the predicted probabilities for the first competitor\n              in each matchup winning against the second.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.online_rao_kupper.OnlineRaoKupper.get_pre_match_ratings", "modulename": "riix.models.online_rao_kupper", "qualname": "OnlineRaoKupper.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.online_rao_kupper.OnlineRaoKupper.batched_update", "modulename": "riix.models.online_rao_kupper", "qualname": "OnlineRaoKupper.batched_update", "kind": "function", "doc": "<p>Apply a single update based on all results of the rating period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups:</strong>  Matchup information for the rating period.</li>\n<li><strong>outcomes:</strong>  Results of the matchups.</li>\n<li><strong>use_cache:</strong>  Flag to use cached probabilities or calculate anew.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.online_rao_kupper.OnlineRaoKupper.online_update", "modulename": "riix.models.online_rao_kupper", "qualname": "OnlineRaoKupper.online_update", "kind": "function", "doc": "<p>Treats the matchups in the rating period as sequential events.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups:</strong>  Sequential matchups in the rating period.</li>\n<li><strong>outcomes:</strong>  Results of each matchup.</li>\n<li><strong>**kwargs:</strong>  Additional parameters (not used).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.online_rao_kupper.OnlineRaoKupper.print_leaderboard", "modulename": "riix.models.online_rao_kupper", "qualname": "OnlineRaoKupper.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.skf", "modulename": "riix.models.skf", "kind": "module", "doc": "<p>simplified kalman filter</p>\n"}, {"fullname": "riix.models.skf.LOG10", "modulename": "riix.models.skf", "qualname": "LOG10", "kind": "variable", "doc": "<p></p>\n", "default_value": "2.302585092994046"}, {"fullname": "riix.models.skf.LOG10_SQUARED", "modulename": "riix.models.skf", "qualname": "LOG10_SQUARED", "kind": "variable", "doc": "<p></p>\n", "default_value": "5.301898110478399"}, {"fullname": "riix.models.skf.bradley_terry_prob", "modulename": "riix.models.skf", "qualname": "bradley_terry_prob", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">z</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.skf.bradley_terry_scalar_prob_g_h", "modulename": "riix.models.skf", "qualname": "bradley_terry_scalar_prob_g_h", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">z</span>, </span><span class=\"param\"><span class=\"n\">outcome</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.skf.thurstone_mosteller_scalar_prob_g_h", "modulename": "riix.models.skf", "qualname": "thurstone_mosteller_scalar_prob_g_h", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">z</span>, </span><span class=\"param\"><span class=\"n\">outcome</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.skf.VSKF", "modulename": "riix.models.skf", "qualname": "VSKF", "kind": "class", "doc": "<p>vector covariance simplified kalman filter</p>\n", "bases": "riix.core.base.OnlineRatingSystem"}, {"fullname": "riix.models.skf.VSKF.__init__", "modulename": "riix.models.skf", "qualname": "VSKF.__init__", "kind": "function", "doc": "<p>Initializes a new instance of an online rating system with a list of competitors.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>competitors (list):</strong>  A list of competitors to be included in the rating system. Each\ncompetitor should have a structure or identifier compatible with\nthe specific rating system's requirements.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">mu_0</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">v_0</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">epsilon</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"o\">=</span><span class=\"s1\">&#39;bt&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;online&#39;</span></span>)</span>"}, {"fullname": "riix.models.skf.VSKF.rating_dim", "modulename": "riix.models.skf", "qualname": "VSKF.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "riix.models.skf.VSKF.mus", "modulename": "riix.models.skf", "qualname": "VSKF.mus", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.skf.VSKF.vs", "modulename": "riix.models.skf", "qualname": "VSKF.vs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.skf.VSKF.has_played", "modulename": "riix.models.skf", "qualname": "VSKF.has_played", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.skf.VSKF.beta", "modulename": "riix.models.skf", "qualname": "VSKF.beta", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.skf.VSKF.beta2", "modulename": "riix.models.skf", "qualname": "VSKF.beta2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.skf.VSKF.s", "modulename": "riix.models.skf", "qualname": "VSKF.s", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.skf.VSKF.s2", "modulename": "riix.models.skf", "qualname": "VSKF.s2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.skf.VSKF.epsilon", "modulename": "riix.models.skf", "qualname": "VSKF.epsilon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.skf.VSKF.prev_time_step", "modulename": "riix.models.skf", "qualname": "VSKF.prev_time_step", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.skf.VSKF.predict", "modulename": "riix.models.skf", "qualname": "VSKF.predict", "kind": "function", "doc": "<p>generate predictions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.skf.VSKF.ratings", "modulename": "riix.models.skf", "qualname": "VSKF.ratings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.skf.VSKF.get_pre_match_ratings", "modulename": "riix.models.skf", "qualname": "VSKF.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.skf.VSKF.time_dynamics_update", "modulename": "riix.models.skf", "qualname": "VSKF.time_dynamics_update", "kind": "function", "doc": "<p>called once per period to model the increase in variance over time</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_step</span>, </span><span class=\"param\"><span class=\"n\">matchups</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.skf.VSKF.batched_update", "modulename": "riix.models.skf", "qualname": "VSKF.batched_update", "kind": "function", "doc": "<p>apply one update based on all of the results of the rating period</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">time_step</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.skf.VSKF.online_update", "modulename": "riix.models.skf", "qualname": "VSKF.online_update", "kind": "function", "doc": "<p>treat the matchups in the rating period as if they were sequential</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">time_step</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.skf.VSKF.print_leaderboard", "modulename": "riix.models.skf", "qualname": "VSKF.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.template", "modulename": "riix.models.template", "kind": "module", "doc": "<p>a template to copy and paste when implementing a new rating system</p>\n"}, {"fullname": "riix.models.template.Template", "modulename": "riix.models.template", "qualname": "Template", "kind": "class", "doc": "<p>put a docstring</p>\n", "bases": "riix.core.base.OnlineRatingSystem"}, {"fullname": "riix.models.template.Template.__init__", "modulename": "riix.models.template", "qualname": "Template.__init__", "kind": "function", "doc": "<p>Initialize the rating system</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">argument</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;lorem ipsum&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;</span>)</span>"}, {"fullname": "riix.models.template.Template.rating_dim", "modulename": "riix.models.template", "qualname": "Template.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "riix.models.template.Template.argument", "modulename": "riix.models.template", "qualname": "Template.argument", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.template.Template.predict", "modulename": "riix.models.template", "qualname": "Template.predict", "kind": "function", "doc": "<p>Generates predictions for a series of matchups between competitors.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.template.Template.get_pre_match_ratings", "modulename": "riix.models.template", "qualname": "Template.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.template.Template.batched_update", "modulename": "riix.models.template", "qualname": "Template.batched_update", "kind": "function", "doc": "<p>Apply a single update based on all results of the rating period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups:</strong>  Matchup information for the rating period.</li>\n<li><strong>outcomes:</strong>  Results of the matchups.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.template.Template.online_update", "modulename": "riix.models.template", "qualname": "Template.online_update", "kind": "function", "doc": "<p>Treats the matchups in the rating period as sequential events.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups:</strong>  Sequential matchups in the rating period.</li>\n<li><strong>outcomes:</strong>  Results of each matchup.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.template.Template.print_leaderboard", "modulename": "riix.models.template", "qualname": "Template.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.temporal_massey", "modulename": "riix.models.temporal_massey", "kind": "module", "doc": "<p>Temporalized Massey Method\n<a href=\"https://www.degruyter.com/document/doi/10.1515/jqas-2016-0093\">https://www.degruyter.com/document/doi/10.1515/jqas-2016-0093</a>\n<a href=\"https://arxiv.org/abs/1702.00585\">https://arxiv.org/abs/1702.00585</a></p>\n"}, {"fullname": "riix.models.temporal_massey.TemporalMassey", "modulename": "riix.models.temporal_massey", "qualname": "TemporalMassey", "kind": "class", "doc": "<p>Implements the original Elo rating system.</p>\n", "bases": "riix.models.elo.Elo"}, {"fullname": "riix.models.temporal_massey.TemporalMassey.__init__", "modulename": "riix.models.temporal_massey", "qualname": "TemporalMassey.__init__", "kind": "function", "doc": "<p>Initializes the Elo rating system with the given parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>competitors (list):</strong>  A list of competitors to be rated within the system.</li>\n<li><strong>initial_rating (float, optional):</strong>  The initial Elo rating for new competitors. Defaults to 1500.0.</li>\n<li><strong>k (float, optional):</strong>  The K-factor, which controls the rate at which ratings change. Defaults to 32.0.</li>\n<li><strong>alpha (float, optional):</strong>  Scaling factor used in the calculation of expected scores. Defaults to log(10) / 400.</li>\n<li><strong>update_method (str, optional):</strong>  Method used to update ratings ('online' or other methods if implemented). Defaults to 'online'.</li>\n<li><strong>dtype:</strong>  The data type for internal numpy computations. Defaults to np.float64.</li>\n</ul>\n\n<p>Initializes an Elo rating system with customizable settings for initial ratings, K-factor, and update method.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">initial_rating</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.95</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;</span>)</span>"}, {"fullname": "riix.models.temporal_massey.TemporalMassey.rating_dim", "modulename": "riix.models.temporal_massey", "qualname": "TemporalMassey.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "riix.models.temporal_massey.TemporalMassey.ratings", "modulename": "riix.models.temporal_massey", "qualname": "TemporalMassey.ratings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.temporal_massey.TemporalMassey.cache", "modulename": "riix.models.temporal_massey", "qualname": "TemporalMassey.cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.temporal_massey.TemporalMassey.get_pre_match_ratings", "modulename": "riix.models.temporal_massey", "qualname": "TemporalMassey.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.temporal_massey.TemporalMassey.get_constant_coefs", "modulename": "riix.models.temporal_massey", "qualname": "TemporalMassey.get_constant_coefs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.temporal_massey.TemporalMassey.get_varying_coefs_helper", "modulename": "riix.models.temporal_massey", "qualname": "TemporalMassey.get_varying_coefs_helper", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.temporal_massey.TemporalMassey.get_varying_coefs", "modulename": "riix.models.temporal_massey", "qualname": "TemporalMassey.get_varying_coefs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx_1</span>, </span><span class=\"param\"><span class=\"n\">idx_2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.temporal_massey.TemporalMassey.predict", "modulename": "riix.models.temporal_massey", "qualname": "TemporalMassey.predict", "kind": "function", "doc": "<p>generate predictions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.temporal_massey.TemporalMassey.batched_update", "modulename": "riix.models.temporal_massey", "qualname": "TemporalMassey.batched_update", "kind": "function", "doc": "<p>apply one update based on all of the results of the rating period</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.temporal_massey.TemporalMassey.online_update", "modulename": "riix.models.temporal_massey", "qualname": "TemporalMassey.online_update", "kind": "function", "doc": "<p>treat the matchups in the rating period as if they were sequential</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.trueskill", "modulename": "riix.models.trueskill", "kind": "module", "doc": "<p>TrueSkill</p>\n"}, {"fullname": "riix.models.trueskill.TrueSkill", "modulename": "riix.models.trueskill", "qualname": "TrueSkill", "kind": "class", "doc": "<p>the og TrueSkill rating system shoutout to Microsoft</p>\n", "bases": "riix.core.base.OnlineRatingSystem"}, {"fullname": "riix.models.trueskill.TrueSkill.__init__", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.__init__", "kind": "function", "doc": "<p>Initializes a new instance of an online rating system with a list of competitors.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>competitors (list):</strong>  A list of competitors to be included in the rating system. Each\ncompetitor should have a structure or identifier compatible with\nthe specific rating system's requirements.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">initial_mu</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">25.0</span>,</span><span class=\"param\">\t<span class=\"n\">initial_sigma</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">8.333</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">4.166</span>,</span><span class=\"param\">\t<span class=\"n\">tau</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0833</span>,</span><span class=\"param\">\t<span class=\"n\">draw_probability</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;</span>)</span>"}, {"fullname": "riix.models.trueskill.TrueSkill.rating_dim", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "riix.models.trueskill.TrueSkill.beta", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.beta", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.trueskill.TrueSkill.two_beta_squared", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.two_beta_squared", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.trueskill.TrueSkill.tau_squared", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.tau_squared", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.trueskill.TrueSkill.prev_time_step", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.prev_time_step", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.trueskill.TrueSkill.epsilon", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.epsilon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.trueskill.TrueSkill.mus", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.mus", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.trueskill.TrueSkill.sigma2s", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.sigma2s", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.trueskill.TrueSkill.has_played", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.has_played", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.trueskill.TrueSkill.cache", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.trueskill.TrueSkill.ratings", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.ratings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.trueskill.TrueSkill.get_pre_match_ratings", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.trueskill.TrueSkill.predict", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.predict", "kind": "function", "doc": "<p>generate predictions</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.trueskill.TrueSkill.increase_rating_dev", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.increase_rating_dev", "kind": "function", "doc": "<p>called once per period to model the increase in variance over time</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_step</span>, </span><span class=\"param\"><span class=\"n\">matchups</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.trueskill.TrueSkill.batched_update", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.batched_update", "kind": "function", "doc": "<p>apply one update based on all of the results of the rating period</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">time_step</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.trueskill.TrueSkill.online_update", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.online_update", "kind": "function", "doc": "<p>treat the matchups in the rating period as if they were sequential</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">time_step</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.trueskill.TrueSkill.print_leaderboard", "modulename": "riix.models.trueskill", "qualname": "TrueSkill.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.velo", "modulename": "riix.models.velo", "kind": "module", "doc": "<p>variance incorporated Elo\nRating of players by Laplace approximation and dynamic modeling\n<a href=\"https://arxiv.org/abs/2310.10386\">https://arxiv.org/abs/2310.10386</a></p>\n"}, {"fullname": "riix.models.velo.vElo", "modulename": "riix.models.velo", "qualname": "vElo", "kind": "class", "doc": "<p>variance incorporated Elo by Weng, Lin, and their students!</p>\n", "bases": "riix.core.base.OnlineRatingSystem"}, {"fullname": "riix.models.velo.vElo.__init__", "modulename": "riix.models.velo", "qualname": "vElo.__init__", "kind": "function", "doc": "<p>Initializes a new instance of an online rating system with a list of competitors.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>competitors (list):</strong>  A list of competitors to be included in the rating system. Each\ncompetitor should have a structure or identifier compatible with\nthe specific rating system's requirements.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">initial_mu</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">initial_sigma</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.2</span>,</span><span class=\"param\">\t<span class=\"n\">sigma_reduction_factor</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">sigma_lower_bound</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.4</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;</span>)</span>"}, {"fullname": "riix.models.velo.vElo.rating_dim", "modulename": "riix.models.velo", "qualname": "vElo.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "riix.models.velo.vElo.mus", "modulename": "riix.models.velo", "qualname": "vElo.mus", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.velo.vElo.vs", "modulename": "riix.models.velo", "qualname": "vElo.vs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.velo.vElo.sigma_reduction_factor", "modulename": "riix.models.velo", "qualname": "vElo.sigma_reduction_factor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.velo.vElo.variance_lower_bound", "modulename": "riix.models.velo", "qualname": "vElo.variance_lower_bound", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.velo.vElo.b", "modulename": "riix.models.velo", "qualname": "vElo.b", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.velo.vElo.b2", "modulename": "riix.models.velo", "qualname": "vElo.b2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.velo.vElo.cache", "modulename": "riix.models.velo", "qualname": "vElo.cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.velo.vElo.predict", "modulename": "riix.models.velo", "qualname": "vElo.predict", "kind": "function", "doc": "<p>generate predictions</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.velo.vElo.get_pre_match_ratings", "modulename": "riix.models.velo", "qualname": "vElo.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.velo.vElo.batched_update", "modulename": "riix.models.velo", "qualname": "vElo.batched_update", "kind": "function", "doc": "<p>apply one update based on all of the results of the rating period</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.velo.vElo.online_update", "modulename": "riix.models.velo", "qualname": "vElo.online_update", "kind": "function", "doc": "<p>treat the matchups in the rating period as if they were sequential</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.velo.vElo.print_leaderboard", "modulename": "riix.models.velo", "qualname": "vElo.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.weng_lin", "modulename": "riix.models.weng_lin", "kind": "module", "doc": "<p>Weng/Lin Bayesian Online Rating system</p>\n"}, {"fullname": "riix.models.weng_lin.WengLin", "modulename": "riix.models.weng_lin", "qualname": "WengLin", "kind": "class", "doc": "<p>The Bayesian Online Rating System introduced by Weng and Lin</p>\n", "bases": "riix.core.base.OnlineRatingSystem"}, {"fullname": "riix.models.weng_lin.WengLin.__init__", "modulename": "riix.models.weng_lin", "qualname": "WengLin.__init__", "kind": "function", "doc": "<p>Initializes a new instance of an online rating system with a list of competitors.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>competitors (list):</strong>  A list of competitors to be included in the rating system. Each\ncompetitor should have a structure or identifier compatible with\nthe specific rating system's requirements.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">initial_mu</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">25.0</span>,</span><span class=\"param\">\t<span class=\"n\">initial_sigma</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">8.333</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">4.166</span>,</span><span class=\"param\">\t<span class=\"n\">kappa</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">tau</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0833</span>,</span><span class=\"param\">\t<span class=\"n\">draw_probability</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"o\">=</span><span class=\"s1\">&#39;tm&#39;</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;</span>)</span>"}, {"fullname": "riix.models.weng_lin.WengLin.rating_dim", "modulename": "riix.models.weng_lin", "qualname": "WengLin.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "riix.models.weng_lin.WengLin.beta", "modulename": "riix.models.weng_lin", "qualname": "WengLin.beta", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin.WengLin.two_beta_squared", "modulename": "riix.models.weng_lin", "qualname": "WengLin.two_beta_squared", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin.WengLin.tau_squared", "modulename": "riix.models.weng_lin", "qualname": "WengLin.tau_squared", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin.WengLin.kappa", "modulename": "riix.models.weng_lin", "qualname": "WengLin.kappa", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin.WengLin.epsilon", "modulename": "riix.models.weng_lin", "qualname": "WengLin.epsilon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin.WengLin.mus", "modulename": "riix.models.weng_lin", "qualname": "WengLin.mus", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin.WengLin.sigma2s", "modulename": "riix.models.weng_lin", "qualname": "WengLin.sigma2s", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin.WengLin.has_played", "modulename": "riix.models.weng_lin", "qualname": "WengLin.has_played", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin.WengLin.prev_time_step", "modulename": "riix.models.weng_lin", "qualname": "WengLin.prev_time_step", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin.WengLin.cache", "modulename": "riix.models.weng_lin", "qualname": "WengLin.cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin.WengLin.get_pre_match_ratings", "modulename": "riix.models.weng_lin", "qualname": "WengLin.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.weng_lin.WengLin.predict", "modulename": "riix.models.weng_lin", "qualname": "WengLin.predict", "kind": "function", "doc": "<p>generate predictions</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.weng_lin.WengLin.increase_rating_dev", "modulename": "riix.models.weng_lin", "qualname": "WengLin.increase_rating_dev", "kind": "function", "doc": "<p>called once per period to model the increase in variance over time</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_step</span>, </span><span class=\"param\"><span class=\"n\">matchups</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.weng_lin.WengLin.batched_update", "modulename": "riix.models.weng_lin", "qualname": "WengLin.batched_update", "kind": "function", "doc": "<p>apply one update based on all of the results of the rating period</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.weng_lin.WengLin.bradley_terry_scalar_updates", "modulename": "riix.models.weng_lin", "qualname": "WengLin.bradley_terry_scalar_updates", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">norm_diff</span>, </span><span class=\"param\"><span class=\"n\">sigma2s</span>, </span><span class=\"param\"><span class=\"n\">combined_sigma2</span>, </span><span class=\"param\"><span class=\"n\">combined_dev</span>, </span><span class=\"param\"><span class=\"n\">outcome</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.weng_lin.WengLin.thurstone_mosteller_scalar_updates", "modulename": "riix.models.weng_lin", "qualname": "WengLin.thurstone_mosteller_scalar_updates", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">norm_diff</span>, </span><span class=\"param\"><span class=\"n\">sigma2s</span>, </span><span class=\"param\"><span class=\"n\">combined_sigma2</span>, </span><span class=\"param\"><span class=\"n\">combined_dev</span>, </span><span class=\"param\"><span class=\"n\">outcome</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.weng_lin.WengLin.online_update", "modulename": "riix.models.weng_lin", "qualname": "WengLin.online_update", "kind": "function", "doc": "<p>treat the matchups in the rating period as if they were sequential</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">time_step</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.weng_lin.WengLin.print_leaderboard", "modulename": "riix.models.weng_lin", "qualname": "WengLin.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller", "modulename": "riix.models.weng_lin_thurstone_mosteller", "kind": "module", "doc": "<p>DEPRECATED!!!!, use weng_lin.WengLin with model=\"tm\", keeping the code here for reference for now</p>\n"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller", "kind": "class", "doc": "<p>The Bayesian Online Rating System introduced by Weng and Lin</p>\n", "bases": "riix.core.base.OnlineRatingSystem"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.__init__", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.__init__", "kind": "function", "doc": "<p>Initializes a new instance of an online rating system with a list of competitors.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>competitors (list):</strong>  A list of competitors to be included in the rating system. Each\ncompetitor should have a structure or identifier compatible with\nthe specific rating system's requirements.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">initial_mu</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">25.0</span>,</span><span class=\"param\">\t<span class=\"n\">initial_sigma</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">8.333</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">4.166</span>,</span><span class=\"param\">\t<span class=\"n\">kappa</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">tau</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0833</span>,</span><span class=\"param\">\t<span class=\"n\">draw_probability</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;</span>)</span>"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.rating_dim", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.beta", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.beta", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.kappa", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.kappa", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.two_beta_squared", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.two_beta_squared", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.tau_squared", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.tau_squared", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.epsilon", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.epsilon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.mus", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.mus", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.sigma2s", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.sigma2s", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.has_played", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.has_played", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.cache", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.ratings", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.ratings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.get_pre_match_ratings", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.predict", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.predict", "kind": "function", "doc": "<p>generate predictions</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.increase_rating_dev", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.increase_rating_dev", "kind": "function", "doc": "<p>called once per period to model the increase in variance over time</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.batched_update", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.batched_update", "kind": "function", "doc": "<p>apply one update based on all of the results of the rating period</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.online_update", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.online_update", "kind": "function", "doc": "<p>treat the matchups in the rating period as if they were sequential</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.weng_lin_thurstone_mosteller.WengLinThurstoneMosteller.print_leaderboard", "modulename": "riix.models.weng_lin_thurstone_mosteller", "qualname": "WengLinThurstoneMosteller.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.yuksel_2024", "modulename": "riix.models.yuksel_2024", "kind": "module", "doc": "<p>The rating system by Cem Yuksel, 2024</p>\n\n<ul>\n<li>paper: <a href=\"http://www.cemyuksel.com/research/matchmaking/i3d2024-matchmaking.pdf\">http://www.cemyuksel.com/research/matchmaking/i3d2024-matchmaking.pdf</a></li>\n<li>supplemental: <a href=\"http://www.cemyuksel.com/research/matchmaking/i3d2024-matchmaking-supplemental.pdf\">http://www.cemyuksel.com/research/matchmaking/i3d2024-matchmaking-supplemental.pdf</a></li>\n<li>webpage: <a href=\"http://www.cemyuksel.com/research/matchmaking/\">http://www.cemyuksel.com/research/matchmaking/</a></li>\n</ul>\n"}, {"fullname": "riix.models.yuksel_2024.Yuksel2024", "modulename": "riix.models.yuksel_2024", "qualname": "Yuksel2024", "kind": "class", "doc": "<p>The rating system presented in Skill-Based Matchmaking for Competitive Two-Player Games by Cem Yuksel</p>\n", "bases": "riix.core.base.OnlineRatingSystem"}, {"fullname": "riix.models.yuksel_2024.Yuksel2024.__init__", "modulename": "riix.models.yuksel_2024", "qualname": "Yuksel2024.__init__", "kind": "function", "doc": "<p>Initialize the rating system</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">competitors</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">initial_rating</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1500.0</span>,</span><span class=\"param\">\t<span class=\"n\">delta_r_max</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">350.0</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span>,</span><span class=\"param\">\t<span class=\"n\">scaling_factor</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">update_method</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;online&#39;</span>,</span><span class=\"param\">\tdtype=&lt;class &#x27;numpy.float64&#x27;&gt;</span>)</span>"}, {"fullname": "riix.models.yuksel_2024.Yuksel2024.rating_dim", "modulename": "riix.models.yuksel_2024", "qualname": "Yuksel2024.rating_dim", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, {"fullname": "riix.models.yuksel_2024.Yuksel2024.delta_r_max", "modulename": "riix.models.yuksel_2024", "qualname": "Yuksel2024.delta_r_max", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.yuksel_2024.Yuksel2024.alpha", "modulename": "riix.models.yuksel_2024", "qualname": "Yuksel2024.alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.yuksel_2024.Yuksel2024.scaling_factor", "modulename": "riix.models.yuksel_2024", "qualname": "Yuksel2024.scaling_factor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.yuksel_2024.Yuksel2024.ratings", "modulename": "riix.models.yuksel_2024", "qualname": "Yuksel2024.ratings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.yuksel_2024.Yuksel2024.R", "modulename": "riix.models.yuksel_2024", "qualname": "Yuksel2024.R", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.yuksel_2024.Yuksel2024.W", "modulename": "riix.models.yuksel_2024", "qualname": "Yuksel2024.W", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.yuksel_2024.Yuksel2024.V", "modulename": "riix.models.yuksel_2024", "qualname": "Yuksel2024.V", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.yuksel_2024.Yuksel2024.D", "modulename": "riix.models.yuksel_2024", "qualname": "Yuksel2024.D", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.models.yuksel_2024.Yuksel2024.predict", "modulename": "riix.models.yuksel_2024", "qualname": "Yuksel2024.predict", "kind": "function", "doc": "<p>Generates predictions for a series of matchups between competitors.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">time_step</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">set_cache</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.yuksel_2024.Yuksel2024.get_pre_match_ratings", "modulename": "riix.models.yuksel_2024", "qualname": "Yuksel2024.get_pre_match_ratings", "kind": "function", "doc": "<p>Returns the ratings for competitors at the timestep of the matchups\nUseful when using pre-match ratings as features in downstream ML pipelines</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups (np.ndarray of shape (n,2)):</strong>  competitor indices</li>\n<li>time_step (optional int)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray of shape (n,2): ratings for specified competitors</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.yuksel_2024.Yuksel2024.batched_update", "modulename": "riix.models.yuksel_2024", "qualname": "Yuksel2024.batched_update", "kind": "function", "doc": "<p>Apply a single update based on all results of the rating period.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups:</strong>  Matchup information for the rating period.</li>\n<li><strong>outcomes:</strong>  Results of the matchups.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">use_cache</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.yuksel_2024.Yuksel2024.g_scalar", "modulename": "riix.models.yuksel_2024", "qualname": "Yuksel2024.g_scalar", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">phi</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.yuksel_2024.Yuksel2024.online_update", "modulename": "riix.models.yuksel_2024", "qualname": "Yuksel2024.online_update", "kind": "function", "doc": "<p>Treats the matchups in the rating period as sequential events.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matchups:</strong>  Sequential matchups in the rating period.</li>\n<li><strong>outcomes:</strong>  Results of each matchup.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.models.yuksel_2024.Yuksel2024.print_leaderboard", "modulename": "riix.models.yuksel_2024", "qualname": "Yuksel2024.print_leaderboard", "kind": "function", "doc": "<p>Prints the leaderboard of the rating system.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_places int:</strong>  The number of top places to display on the leaderboard.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_places</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.utils", "modulename": "riix.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "riix.utils.constants", "modulename": "riix.utils.constants", "kind": "module", "doc": "<p>mathematical constants computed once here to avoid recomputation</p>\n"}, {"fullname": "riix.utils.constants.PI2", "modulename": "riix.utils.constants", "qualname": "PI2", "kind": "variable", "doc": "<p></p>\n", "default_value": "9.869604401089358"}, {"fullname": "riix.utils.constants.THREE_OVER_PI_SQUARED", "modulename": "riix.utils.constants", "qualname": "THREE_OVER_PI_SQUARED", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.3039635509270133"}, {"fullname": "riix.utils.constants.Q", "modulename": "riix.utils.constants", "qualname": "Q", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.005756462732485115"}, {"fullname": "riix.utils.constants.Q2", "modulename": "riix.utils.constants", "qualname": "Q2", "kind": "variable", "doc": "<p></p>\n", "default_value": "3.3136863190489995e-05"}, {"fullname": "riix.utils.constants.Q2_3", "modulename": "riix.utils.constants", "qualname": "Q2_3", "kind": "variable", "doc": "<p></p>\n", "default_value": "9.941058957146998e-05"}, {"fullname": "riix.utils.constants.Q2_3_OVER_PI2", "modulename": "riix.utils.constants", "qualname": "Q2_3_OVER_PI2", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.007239860196398e-05"}, {"fullname": "riix.utils.data_utils", "modulename": "riix.utils.data_utils", "kind": "module", "doc": "<p>classes and functions for working with rating data</p>\n"}, {"fullname": "riix.utils.data_utils.TimedPairDataset", "modulename": "riix.utils.data_utils", "qualname": "TimedPairDataset", "kind": "class", "doc": "<p>class for loading and iterating over paired comparison data</p>\n"}, {"fullname": "riix.utils.data_utils.TimedPairDataset.__init__", "modulename": "riix.utils.data_utils", "qualname": "TimedPairDataset.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">competitor_cols</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">outcome_col</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">datetime_col</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_step_col</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rating_period</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;1W&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "riix.utils.data_utils.TimedPairDataset.time_steps", "modulename": "riix.utils.data_utils", "qualname": "TimedPairDataset.time_steps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.utils.data_utils.TimedPairDataset.num_matchups", "modulename": "riix.utils.data_utils", "qualname": "TimedPairDataset.num_matchups", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.utils.data_utils.TimedPairDataset.competitors", "modulename": "riix.utils.data_utils", "qualname": "TimedPairDataset.competitors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.utils.data_utils.TimedPairDataset.num_competitors", "modulename": "riix.utils.data_utils", "qualname": "TimedPairDataset.num_competitors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.utils.data_utils.TimedPairDataset.competitor_to_idx", "modulename": "riix.utils.data_utils", "qualname": "TimedPairDataset.competitor_to_idx", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.utils.data_utils.TimedPairDataset.matchups", "modulename": "riix.utils.data_utils", "qualname": "TimedPairDataset.matchups", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.utils.data_utils.TimedPairDataset.outcomes", "modulename": "riix.utils.data_utils", "qualname": "TimedPairDataset.outcomes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "riix.utils.data_utils.TimedPairDataset.process_time_steps", "modulename": "riix.utils.data_utils", "qualname": "TimedPairDataset.process_time_steps", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.utils.data_utils.TimedPairDataset.init_from_arrays", "modulename": "riix.utils.data_utils", "qualname": "TimedPairDataset.init_from_arrays", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">time_steps</span>, </span><span class=\"param\"><span class=\"n\">matchups</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span>, </span><span class=\"param\"><span class=\"n\">competitors</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.utils.data_utils.TimedPairDataset.load_from_npz", "modulename": "riix.utils.data_utils", "qualname": "TimedPairDataset.load_from_npz", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.utils.data_utils.split_pair_dataset", "modulename": "riix.utils.data_utils", "qualname": "split_pair_dataset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">test_fraction</span><span class=\"o\">=</span><span class=\"mf\">0.2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.utils.data_utils.generate_matchup_data", "modulename": "riix.utils.data_utils", "qualname": "generate_matchup_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">num_matchups</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10000</span>,</span><span class=\"param\">\t<span class=\"n\">num_competitors</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">num_rating_periods</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">strength_var</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">strength_noise_var</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">theta</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.001</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.utils.date_utils", "modulename": "riix.utils.date_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "riix.utils.date_utils.PROG", "modulename": "riix.utils.date_utils", "qualname": "PROG", "kind": "variable", "doc": "<p></p>\n", "default_value": "re.compile(&#x27;(\\\\d+)([WwDdHhMmSs])&#x27;)"}, {"fullname": "riix.utils.date_utils.SECONDS_PER_UNIT", "modulename": "riix.utils.date_utils", "qualname": "SECONDS_PER_UNIT", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;W&#x27;: 604800, &#x27;D&#x27;: 86400, &#x27;H&#x27;: 3600, &#x27;M&#x27;: 60, &#x27;S&#x27;: 1}"}, {"fullname": "riix.utils.date_utils.get_duration", "modulename": "riix.utils.date_utils", "qualname": "get_duration", "kind": "function", "doc": "<p>Parse duration strings like '7D', '1W', '24H' etc. into the number os seconds since epoch as an int</p>\n\n<h2 id=\"parameters\">Parameters:</h2>\n\n<p>duration_str : str\n    String in format numberLetter where Letter is one of:\n    W/w - weeks\n    D/d - days\n    H/h - hours\n    M/m - minutes\n    S/s - seconds</p>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>duration : int</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">duration_str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.utils.math_utils", "modulename": "riix.utils.math_utils", "kind": "module", "doc": "<p>math utility functions for rating systems</p>\n"}, {"fullname": "riix.utils.math_utils.sigmoid", "modulename": "riix.utils.math_utils", "qualname": "sigmoid", "kind": "function", "doc": "<p>a little faster than implementing it in numpy for d &lt; 100000</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.utils.math_utils.sigmoid_scalar", "modulename": "riix.utils.math_utils", "qualname": "sigmoid_scalar", "kind": "function", "doc": "<p>no need to use numpy on scalars</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.utils.math_utils.base_10_sigmoid", "modulename": "riix.utils.math_utils", "qualname": "base_10_sigmoid", "kind": "function", "doc": "<p>some methods prefer base 10 unfortunately</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.utils.math_utils.INV_SQRT_2", "modulename": "riix.utils.math_utils", "qualname": "INV_SQRT_2", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.7071067811865475"}, {"fullname": "riix.utils.math_utils.norm_cdf", "modulename": "riix.utils.math_utils", "qualname": "norm_cdf", "kind": "function", "doc": "<p>cdf of standard normal</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.utils.math_utils.STANDARD_NORMAL", "modulename": "riix.utils.math_utils", "qualname": "STANDARD_NORMAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "NormalDist(mu=0.0, sigma=1.0)"}, {"fullname": "riix.utils.math_utils.norm_pdf", "modulename": "riix.utils.math_utils", "qualname": "norm_pdf", "kind": "function", "doc": "<p>pdf of standard normal</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.utils.math_utils.v_and_w_win_vector", "modulename": "riix.utils.math_utils", "qualname": "v_and_w_win_vector", "kind": "function", "doc": "<p>calculate v and w for a win in a vectorized fashion</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">t</span>, </span><span class=\"param\"><span class=\"n\">eps</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.utils.math_utils.v_and_w_draw_vector", "modulename": "riix.utils.math_utils", "qualname": "v_and_w_draw_vector", "kind": "function", "doc": "<p>calculate v and w for a draw in a vectorized fashion</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">t</span>, </span><span class=\"param\"><span class=\"n\">eps</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.utils.math_utils.v_and_w_win_scalar", "modulename": "riix.utils.math_utils", "qualname": "v_and_w_win_scalar", "kind": "function", "doc": "<p>calculate v and w for a win in a scalar fashion</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">t</span>, </span><span class=\"param\"><span class=\"n\">eps</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "riix.utils.math_utils.v_and_w_draw_scalar", "modulename": "riix.utils.math_utils", "qualname": "v_and_w_draw_scalar", "kind": "function", "doc": "<p>calculate v and w for a draw in a scalar fashion</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">t</span>, </span><span class=\"param\"><span class=\"n\">eps</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();